#!@PIKE@ -M@prefix@/scriptrunner/lib -P@prefix@/scriptrunner/lib

<<<<<<< ScriptRunner.fcgi.in
import Tools.Logging;

inherit ScriptRunner.Runner;

constant my_version = "0.4";

//#define RUN_THREADED

string session_storagetype = "ram";
string session_storagedir = ""; // not required for ram storage.

//string session_storagetype = "sqlite";
//string session_storagedir = "/tmp/scriptrunner_storage.db";

//string session_storagetype = "file";
//string session_storagedir = "/tmp/scriptrunner_storage";

string logfile_path = "/tmp/scriptrunner.log";
string session_cookie_name = "PSESSIONID";
int session_timeout = 3600;

string mode = "FastCGI";

int start_listener(int port)
{
    int sock;

    if(!port)
    {
      Log.info("Starting listener on stdin socket.");
      f = Stdio.stdin.dup();
      sock = f->query_fd();
    }
    else
    {
      Log.info("Starting listener on port %d.", (int)port);
      sock = Public.Web.FCGI.open_socket(":" + (int)port, 128);
    }
  #ifdef RUN_THREADED
        for (int i = 0; i < 8; i++) {
                Thread.Thread(request_loop, sock, i);
        }
        return (-1);
  #else
        request_loop(sock, 0);
        return 0;
  #endif
}


void request_loop(int sock, int id)
{
        String.Buffer response = String.Buffer();

#ifdef RUN_THREADED
        Thread.Mutex lock;
	Thread.MutexKey key;

        lock = Thread.Mutex();
        key = lock->lock();
#endif
	object request = Public.Web.FCGI.FCGI(sock);
#ifdef RUN_THREADED
        key = 0;
#endif

        do{
		request->accept();
                requests ++;
                object request_id;
                mixed e;

                if(catch(request_id = ScriptRunner.RequestID(request)))
                {
#ifdef RUN_THREADED
                  key = lock->lock();
#endif
                  request->write("Status: 500 Server Error\r\n");
                  request->write("Content-type: text/html\r\n\r\n");
                  request->write("<h1>Error 500: Internal Server Error</h1>");
                  request->write("The server was unable to parse your request.\n");
                  request->finish();
#ifdef RUN_THREADED
                  key = 0;
#endif
		  continue;
                }

                handle_request(request, id);
          } while (!shutdown);
}
