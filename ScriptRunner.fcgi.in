#!/usr/local/bin/pike

Stdio.File logfile;

mapping compiled_scripts = ([]);

int main(int argc, array(string) argv)
{
  int sock;

  logfile=Stdio.File("/tmp/scriptrunner.log", "rwac");

  Stdio.File f = Stdio.stdin.dup();
  
	for (int i = 0; i < 8; i++) {
		Thread.Thread(request_loop, f->query_fd(), i);
	}
	return (-1);
}

void request_loop(int sock, int id)
{
	object request = Public.Web.FCGI.FCGI(sock);


	for (int i = 1; ; i++) {
		request->accept();
                object request_id;
                mixed e;

                e = catch {
                request_id = ((program)"RequestID")(request);

                // do we have a script file passed?
                if(request_id->misc->path_info && 
                       sizeof(request_id->misc->path_info))
                {
                   object s;
                  s = get_script(request_id->misc->path_translated, request_id);
		     log("running script\n");
                     mixed retval;
                     retval = s->parse(request_id);
                     if(!stringp(retval))
                     {
		     log("have a control structure.\n");
                        request->write("Content-type: text/plain\r\n\r\n");
                        request->write("%O", retval);
                     }
                     else
                     {
		     log("have a response to send.\n");
                        request->write("Content-type: text/html\r\n\r\n");
                        request->write(retval);
                     }
                }
                // no, then just print info.
                else
                {
  		  request->write("Content-type: text/html\r\n\r\n");
		  request->write("Hello world, this is page (%O) view #%d generated by thread %d\n", request_id->not_query, i, id);
                  request->write("Pike Info:\n");
                  request->write("<pre>\n%O\n</pre>\n", version());
                  request->write("Request Info:\n");
		  request->write("<pre>\nID: %O\n</pre>", 
                    mkmapping(indices(request_id), values(request_id)));
                }

                };

                  if(e)
                  {
                     if(objectp(e))
                       log("got an error: %s\n", e->describe());
                     else
                       log("got an error: %O\n", e);
                     request->write("Content-type: text/html\r\n\r\n");
                     request->write("an error occurred while compiling the script:\n");
                     request->write("<pre>\n%s\n</pre>", e->describe()); 
                request->finish();
log("done\n");
                  }


		log("request finished\n");
                

	}
}

object get_script(string path, object id)
{
  string code;
  program p;
  Stdio.Stat stat;

  log("getting script %O\n", path);
  stat = file_stat(path);

  if(!stat)
    error("Script does not exist.\n");

  if((compiled_scripts[path] && compiled_scripts[path]->modified == stat->mtime)
         && !id->pragma["no-cache"])
    return compiled_scripts[path]->object;

  log("compiling file %s\n", path);

  code = Stdio.read_file(path);

  if(!code)
    error("Script is an empty file.\n");

  p = compile_string(code);
  
  mapping ent = (["object": p(), "modified": stat->mtime]);

  compiled_scripts[path] = ent;

  return ent->object;
}

void log(string t, mixed ... args)
{
  if(args)
    t = sprintf(t, @args);
  logfile->write(sprintf("[%s] %s", (ctime(time())- "\n"), t));
}
